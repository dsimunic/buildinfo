# buildinfo.mk - Build metadata generation
# Include this file in your Makefile and call 'generate-buildinfo' target

# New version format:
# Without git: VERSION@TIMESTAMP
# With git: VERSION@branch-revision-timestamp
# With git, dirty tree: VERSION@branch-HEAD-timestamp (or 'detached' if no branch)
# If -DRELEASE_VERSION specified: VERSION only

FALLBACK_NAME ?= unknown
FALLBACK_REV  ?= unknown
VERSION_FILE ?= VERSION

INSIDE_WT := $(shell command -v git >/dev/null 2>&1 && git rev-parse --is-inside-work-tree 2>/dev/null || echo false)

# Read base version from VERSION file
ifneq ($(wildcard $(VERSION_FILE)),)
  BASE_VERSION := $(shell cat $(VERSION_FILE))
else
  BASE_VERSION := $(FALLBACK_NAME)
endif

# Check if RELEASE_VERSION is defined (via -DRELEASE_VERSION in CFLAGS or as make variable)
ifdef RELEASE_VERSION
  GITVER := $(BASE_VERSION)
  BRANCH_NAME := release
  REV := $(BASE_VERSION)
  REV_FULL := $(BASE_VERSION)
  DIRTY_FLAG := false
  TIMESTAMP := $(shell date -u +%Y-%m-%dT%H:%M:%SZ)
else ifeq ($(INSIDE_WT),true)
  # Inside git repository
  BRANCH_NAME := $(shell git symbolic-ref --short -q HEAD 2>/dev/null || echo detached)
  REV_FULL := $(shell git rev-parse HEAD)
  DIRTY_FLAG := $(shell test -n "$$(git status --porcelain 2>/dev/null)" && echo "true" || echo "false")
  TIMESTAMP := $(shell date -u +%Y-%m-%dT%H:%M:%SZ)

  ifeq ($(DIRTY_FLAG),true)
    # Dirty tree: VERSION@branch-HEAD-timestamp
    REV := HEAD
    GITVER := $(BASE_VERSION)@$(BRANCH_NAME)-HEAD-$(TIMESTAMP)
  else
    # Clean tree: VERSION@branch-revision-timestamp
    REV := $(shell git rev-parse --short=8 HEAD)
    GITVER := $(BASE_VERSION)@$(BRANCH_NAME)-$(REV)-$(TIMESTAMP)
  endif
else
  # Not in git repository: VERSION@TIMESTAMP
  BRANCH_NAME := unknown
  REV := unknown
  REV_FULL := unknown
  DIRTY_FLAG := unknown
  TIMESTAMP := $(shell date -u +%Y-%m-%dT%H:%M:%SZ)
  GITVER := $(BASE_VERSION)@$(TIMESTAMP)
endif

# Capture build environment metadata
BUILD_DATE := $(shell date -u +%Y-%m-%dT%H:%M:%SZ)
BUILD_HOST := $(shell hostname)
BUILD_USER := $(shell whoami)
BUILD_OS := $(shell uname -s)
BUILD_ARCH := $(shell uname -m)

# CC_VERSION will be evaluated when generate-buildinfo is called
# so it picks up the CC variable from the parent Makefile

.PHONY: print-version
print-version:
	@echo $(GITVER)

# Generate buildinfo.c with all metadata
.PHONY: generate-buildinfo
generate-buildinfo:
	@mkdir -p $(BUILDDIR)
	@echo "/* Auto-generated by buildinfo.mk - do not edit */" > $(BUILDDIR)/buildinfo.c
	@echo "" >> $(BUILDDIR)/buildinfo.c
	@echo "#include <stdio.h>" >> $(BUILDDIR)/buildinfo.c
	@echo "#include <string.h>" >> $(BUILDDIR)/buildinfo.c
	@echo "" >> $(BUILDDIR)/buildinfo.c
	@echo "const char *build_base_version = \"$(BASE_VERSION)\";" >> $(BUILDDIR)/buildinfo.c
	@echo "const char *build_full_version = \"$(GITVER)\";" >> $(BUILDDIR)/buildinfo.c
	@echo "const char *build_commit_short = \"$(REV)\";" >> $(BUILDDIR)/buildinfo.c
	@echo "const char *build_commit_full = \"$(REV_FULL)\";" >> $(BUILDDIR)/buildinfo.c
	@echo "const char *build_timestamp = \"$(BUILD_DATE)\";" >> $(BUILDDIR)/buildinfo.c
	@echo "const char *build_dirty = \"$(DIRTY_FLAG)\";" >> $(BUILDDIR)/buildinfo.c
	@echo "const char *build_host = \"$(BUILD_HOST)\";" >> $(BUILDDIR)/buildinfo.c
	@echo "const char *build_user = \"$(BUILD_USER)\";" >> $(BUILDDIR)/buildinfo.c
	@echo "const char *build_os = \"$(BUILD_OS)\";" >> $(BUILDDIR)/buildinfo.c
	@echo "const char *build_arch = \"$(BUILD_ARCH)\";" >> $(BUILDDIR)/buildinfo.c
	@echo "const char *build_compiler = \"$(shell $(CC) --version 2>/dev/null | head -n1)\";" >> $(BUILDDIR)/buildinfo.c
	@echo "" >> $(BUILDDIR)/buildinfo.c
	@echo "/* Structured metadata in custom ELF/Mach-O section */" >> $(BUILDDIR)/buildinfo.c
	@printf "#ifdef __APPLE__\n" >> $(BUILDDIR)/buildinfo.c
	@printf "__attribute__((section(\"__TEXT,__buildinfo\")))\n" >> $(BUILDDIR)/buildinfo.c
	@printf "#else\n" >> $(BUILDDIR)/buildinfo.c
	@printf "__attribute__((section(\".buildinfo\")))\n" >> $(BUILDDIR)/buildinfo.c
	@printf "#endif\n" >> $(BUILDDIR)/buildinfo.c
	@echo "__attribute__((used))" >> $(BUILDDIR)/buildinfo.c
	@echo "const char build_metadata[] =" >> $(BUILDDIR)/buildinfo.c
	@printf "    \"base_version=$(BASE_VERSION)\\\\n\"\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    \"full_version=$(GITVER)\\\\n\"\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    \"commit=$(REV_FULL)\\\\n\"\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    \"commit_short=$(REV)\\\\n\"\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    \"timestamp=$(BUILD_DATE)\\\\n\"\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    \"dirty=$(DIRTY_FLAG)\\\\n\"\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    \"build_host=$(BUILD_HOST)\\\\n\"\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    \"build_user=$(BUILD_USER)\\\\n\"\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    \"build_os=$(BUILD_OS)\\\\n\"\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    \"build_arch=$(BUILD_ARCH)\\\\n\"\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    \"compiler=$(shell $(CC) --version 2>/dev/null | head -n1)\\\\n\";\n" >> $(BUILDDIR)/buildinfo.c
	@echo "" >> $(BUILDDIR)/buildinfo.c
	@echo "void print_version_info(void) {" >> $(BUILDDIR)/buildinfo.c
	@printf "    printf(\"Version: %%s\\\\n\", build_full_version);\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    printf(\"  Base version: %%s\\\\n\", build_base_version);\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    printf(\"  Commit: %%s\\\\n\", build_commit_full);\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    printf(\"  Built: %%s\\\\n\", build_timestamp);\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    printf(\"  Compiler: %%s\\\\n\", build_compiler);\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    printf(\"  Platform: %%s/%%s\\\\n\", build_os, build_arch);\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    if (strcmp(build_dirty, \"true\") == 0) {\n" >> $(BUILDDIR)/buildinfo.c
	@printf "        printf(\"  (built from dirty working tree)\\\\n\");\n" >> $(BUILDDIR)/buildinfo.c
	@printf "    }\n" >> $(BUILDDIR)/buildinfo.c
	@printf "}\n" >> $(BUILDDIR)/buildinfo.c
